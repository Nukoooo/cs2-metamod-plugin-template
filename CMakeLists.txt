# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(cs2-plugin)

# Target: mmsdk
add_library(mmsdk INTERFACE)

add_library(mmsdk::mmsdk ALIAS mmsdk)
target_compile_definitions(mmsdk INTERFACE
	META_IS_SOURCE2
)

target_include_directories(mmsdk INTERFACE
	"metamod-source/core"
	"metamod-source/core/sourcehook"
)

# Target: hl2sdk
add_library(hl2sdk INTERFACE)

add_library(hl2sdk::hl2sdk ALIAS hl2sdk)
target_compile_definitions(hl2sdk INTERFACE
	PLATFORM_64BITS
)

target_include_directories(hl2sdk INTERFACE
	hl2sdk
	"hl2sdk/thirdparty/protobuf-3.21.8/src"
	"hl2sdk/common"
	"hl2sdk/game/shared"
	"hl2sdk/game/server"
	"hl2sdk/public"
	"hl2sdk/public/engine"
	"hl2sdk/public/mathlib"
	"hl2sdk/public/tier0"
	"hl2sdk/public/tier1"
	"hl2sdk/public/entity2"
	"hl2sdk/public/game/server"
)

# Target: plugin
set(plugin_SOURCES
	"src/lib/module.windows.cpp"
	"src/lib/pattern.cpp"
	"src/plugin.cpp"
	"src/lib/address.hpp"
	"src/lib/fnv1a_hash.hpp"
	"src/lib/module.hpp"
	"src/lib/pattern.hpp"
	"src/lib/simd.hpp"
	"src/plugin.hpp"
	${protobuf_output_stamp}
	cmake.toml
)

add_library(plugin SHARED)

target_sources(plugin PRIVATE ${plugin_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${plugin_SOURCES})

if(WIN32) # windows
	target_compile_definitions(plugin PUBLIC
		WIN32
		WINDOWS
	)
endif()

if(MSVC) # msvc
	target_compile_definitions(plugin PUBLIC
		COMPILER_MSVC64
		COMPILER_MSVC
		NOMINMAX
		MSVC
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_definitions(plugin PUBLIC
		GCC
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_definitions(plugin PUBLIC
		CLANG
	)
endif()

target_compile_features(plugin PUBLIC
	cxx_std_23
)

if(MSVC) # msvc
	target_compile_options(plugin PRIVATE
		"/MP"
		"/permissive-"
		"/utf-8"
		"/MT$<$<CONFIG:Debug>:d>"
	)
endif()

if(WIN32) # windows
	target_link_libraries(plugin PUBLIC
		"${CMAKE_CURRENT_SOURCE_DIR}/hl2sdk/lib/public/win64/interfaces.lib"
		"${CMAKE_CURRENT_SOURCE_DIR}/hl2sdk/lib/public/win64/2015/libprotobuf.lib"
		"${CMAKE_CURRENT_SOURCE_DIR}/hl2sdk/lib/public/win64/tier0.lib"
		"${CMAKE_CURRENT_SOURCE_DIR}/hl2sdk/lib/public/win64/tier1.lib"
		"${CMAKE_CURRENT_SOURCE_DIR}/hl2sdk/lib/public/win64/mathlib.lib"
	)
endif()

target_link_libraries(plugin PUBLIC
	hl2sdk::hl2sdk
	mmsdk::mmsdk
)
